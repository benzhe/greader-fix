package org.apache.commons.text.translate;

import defpackage.jo;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;

/* loaded from: classes2.dex */
public class EntityArrays {
    public static final Map<CharSequence, CharSequence> APOS_ESCAPE;
    public static final Map<CharSequence, CharSequence> APOS_UNESCAPE;
    public static final Map<CharSequence, CharSequence> BASIC_ESCAPE;
    public static final Map<CharSequence, CharSequence> BASIC_UNESCAPE;
    public static final Map<CharSequence, CharSequence> HTML40_EXTENDED_ESCAPE;
    public static final Map<CharSequence, CharSequence> HTML40_EXTENDED_UNESCAPE;
    public static final Map<CharSequence, CharSequence> ISO8859_1_ESCAPE;
    public static final Map<CharSequence, CharSequence> ISO8859_1_UNESCAPE;
    public static final Map<CharSequence, CharSequence> JAVA_CTRL_CHARS_ESCAPE;
    public static final Map<CharSequence, CharSequence> JAVA_CTRL_CHARS_UNESCAPE;

    static {
        HashMap mapE = jo.E(" ", "&nbsp;", "¡", "&iexcl;");
        mapE.put("¢", "&cent;");
        mapE.put("£", "&pound;");
        mapE.put("¤", "&curren;");
        mapE.put("¥", "&yen;");
        mapE.put("¦", "&brvbar;");
        mapE.put("§", "&sect;");
        mapE.put("¨", "&uml;");
        mapE.put("©", "&copy;");
        mapE.put("ª", "&ordf;");
        mapE.put("«", "&laquo;");
        mapE.put("¬", "&not;");
        mapE.put("\u00ad", "&shy;");
        mapE.put("®", "&reg;");
        mapE.put("¯", "&macr;");
        mapE.put("°", "&deg;");
        mapE.put("±", "&plusmn;");
        mapE.put("²", "&sup2;");
        mapE.put("³", "&sup3;");
        mapE.put("´", "&acute;");
        mapE.put("µ", "&micro;");
        mapE.put("¶", "&para;");
        mapE.put("·", "&middot;");
        mapE.put("¸", "&cedil;");
        mapE.put("¹", "&sup1;");
        mapE.put("º", "&ordm;");
        mapE.put("»", "&raquo;");
        mapE.put("¼", "&frac14;");
        mapE.put("½", "&frac12;");
        mapE.put("¾", "&frac34;");
        mapE.put("¿", "&iquest;");
        mapE.put("À", "&Agrave;");
        mapE.put("Á", "&Aacute;");
        mapE.put("Â", "&Acirc;");
        mapE.put("Ã", "&Atilde;");
        mapE.put("Ä", "&Auml;");
        mapE.put("Å", "&Aring;");
        mapE.put("Æ", "&AElig;");
        mapE.put("Ç", "&Ccedil;");
        mapE.put("È", "&Egrave;");
        mapE.put("É", "&Eacute;");
        mapE.put("Ê", "&Ecirc;");
        mapE.put("Ë", "&Euml;");
        mapE.put("Ì", "&Igrave;");
        mapE.put("Í", "&Iacute;");
        mapE.put("Î", "&Icirc;");
        mapE.put("Ï", "&Iuml;");
        mapE.put("Ð", "&ETH;");
        mapE.put("Ñ", "&Ntilde;");
        mapE.put("Ò", "&Ograve;");
        mapE.put("Ó", "&Oacute;");
        mapE.put("Ô", "&Ocirc;");
        mapE.put("Õ", "&Otilde;");
        mapE.put("Ö", "&Ouml;");
        mapE.put("×", "&times;");
        mapE.put("Ø", "&Oslash;");
        mapE.put("Ù", "&Ugrave;");
        mapE.put("Ú", "&Uacute;");
        mapE.put("Û", "&Ucirc;");
        mapE.put("Ü", "&Uuml;");
        mapE.put("Ý", "&Yacute;");
        mapE.put("Þ", "&THORN;");
        mapE.put("ß", "&szlig;");
        mapE.put("à", "&agrave;");
        mapE.put("á", "&aacute;");
        mapE.put("â", "&acirc;");
        mapE.put("ã", "&atilde;");
        mapE.put("ä", "&auml;");
        mapE.put("å", "&aring;");
        mapE.put("æ", "&aelig;");
        mapE.put("ç", "&ccedil;");
        mapE.put("è", "&egrave;");
        mapE.put("é", "&eacute;");
        mapE.put("ê", "&ecirc;");
        mapE.put("ë", "&euml;");
        mapE.put("ì", "&igrave;");
        mapE.put("í", "&iacute;");
        mapE.put("î", "&icirc;");
        mapE.put("ï", "&iuml;");
        mapE.put("ð", "&eth;");
        mapE.put("ñ", "&ntilde;");
        mapE.put("ò", "&ograve;");
        mapE.put("ó", "&oacute;");
        mapE.put("ô", "&ocirc;");
        mapE.put("õ", "&otilde;");
        mapE.put("ö", "&ouml;");
        mapE.put("÷", "&divide;");
        mapE.put("ø", "&oslash;");
        mapE.put("ù", "&ugrave;");
        mapE.put("ú", "&uacute;");
        mapE.put("û", "&ucirc;");
        mapE.put("ü", "&uuml;");
        mapE.put("ý", "&yacute;");
        mapE.put("þ", "&thorn;");
        mapE.put("ÿ", "&yuml;");
        Map<CharSequence, CharSequence> mapUnmodifiableMap = Collections.unmodifiableMap(mapE);
        ISO8859_1_ESCAPE = mapUnmodifiableMap;
        ISO8859_1_UNESCAPE = Collections.unmodifiableMap(invert(mapUnmodifiableMap));
        HashMap mapE2 = jo.E("ƒ", "&fnof;", "Α", "&Alpha;");
        mapE2.put("Β", "&Beta;");
        mapE2.put("Γ", "&Gamma;");
        mapE2.put("Δ", "&Delta;");
        mapE2.put("Ε", "&Epsilon;");
        mapE2.put("Ζ", "&Zeta;");
        mapE2.put("Η", "&Eta;");
        mapE2.put("Θ", "&Theta;");
        mapE2.put("Ι", "&Iota;");
        mapE2.put("Κ", "&Kappa;");
        mapE2.put("Λ", "&Lambda;");
        mapE2.put("Μ", "&Mu;");
        mapE2.put("Ν", "&Nu;");
        mapE2.put("Ξ", "&Xi;");
        mapE2.put("Ο", "&Omicron;");
        mapE2.put("Π", "&Pi;");
        mapE2.put("Ρ", "&Rho;");
        mapE2.put("Σ", "&Sigma;");
        mapE2.put("Τ", "&Tau;");
        mapE2.put("Υ", "&Upsilon;");
        mapE2.put("Φ", "&Phi;");
        mapE2.put("Χ", "&Chi;");
        mapE2.put("Ψ", "&Psi;");
        mapE2.put("Ω", "&Omega;");
        mapE2.put("α", "&alpha;");
        mapE2.put("β", "&beta;");
        mapE2.put("γ", "&gamma;");
        mapE2.put("δ", "&delta;");
        mapE2.put("ε", "&epsilon;");
        mapE2.put("ζ", "&zeta;");
        mapE2.put("η", "&eta;");
        mapE2.put("θ", "&theta;");
        mapE2.put("ι", "&iota;");
        mapE2.put("κ", "&kappa;");
        mapE2.put("λ", "&lambda;");
        mapE2.put("μ", "&mu;");
        mapE2.put("ν", "&nu;");
        mapE2.put("ξ", "&xi;");
        mapE2.put("ο", "&omicron;");
        mapE2.put("π", "&pi;");
        mapE2.put("ρ", "&rho;");
        mapE2.put("ς", "&sigmaf;");
        mapE2.put("σ", "&sigma;");
        mapE2.put("τ", "&tau;");
        mapE2.put("υ", "&upsilon;");
        mapE2.put("φ", "&phi;");
        mapE2.put("χ", "&chi;");
        mapE2.put("ψ", "&psi;");
        mapE2.put("ω", "&omega;");
        mapE2.put("ϑ", "&thetasym;");
        mapE2.put("ϒ", "&upsih;");
        mapE2.put("ϖ", "&piv;");
        mapE2.put("•", "&bull;");
        mapE2.put("…", "&hellip;");
        mapE2.put("′", "&prime;");
        mapE2.put("″", "&Prime;");
        mapE2.put("‾", "&oline;");
        mapE2.put("⁄", "&frasl;");
        mapE2.put("℘", "&weierp;");
        mapE2.put("ℑ", "&image;");
        mapE2.put("ℜ", "&real;");
        mapE2.put("™", "&trade;");
        mapE2.put("ℵ", "&alefsym;");
        mapE2.put("←", "&larr;");
        mapE2.put("↑", "&uarr;");
        mapE2.put("→", "&rarr;");
        mapE2.put("↓", "&darr;");
        mapE2.put("↔", "&harr;");
        mapE2.put("↵", "&crarr;");
        mapE2.put("⇐", "&lArr;");
        mapE2.put("⇑", "&uArr;");
        mapE2.put("⇒", "&rArr;");
        mapE2.put("⇓", "&dArr;");
        mapE2.put("⇔", "&hArr;");
        mapE2.put("∀", "&forall;");
        mapE2.put("∂", "&part;");
        mapE2.put("∃", "&exist;");
        mapE2.put("∅", "&empty;");
        mapE2.put("∇", "&nabla;");
        mapE2.put("∈", "&isin;");
        mapE2.put("∉", "&notin;");
        mapE2.put("∋", "&ni;");
        mapE2.put("∏", "&prod;");
        mapE2.put("∑", "&sum;");
        mapE2.put("−", "&minus;");
        mapE2.put("∗", "&lowast;");
        mapE2.put("√", "&radic;");
        mapE2.put("∝", "&prop;");
        mapE2.put("∞", "&infin;");
        mapE2.put("∠", "&ang;");
        mapE2.put("∧", "&and;");
        mapE2.put("∨", "&or;");
        mapE2.put("∩", "&cap;");
        mapE2.put("∪", "&cup;");
        mapE2.put("∫", "&int;");
        mapE2.put("∴", "&there4;");
        mapE2.put("∼", "&sim;");
        mapE2.put("≅", "&cong;");
        mapE2.put("≈", "&asymp;");
        mapE2.put("≠", "&ne;");
        mapE2.put("≡", "&equiv;");
        mapE2.put("≤", "&le;");
        mapE2.put("≥", "&ge;");
        mapE2.put("⊂", "&sub;");
        mapE2.put("⊃", "&sup;");
        mapE2.put("⊄", "&nsub;");
        mapE2.put("⊆", "&sube;");
        mapE2.put("⊇", "&supe;");
        mapE2.put("⊕", "&oplus;");
        mapE2.put("⊗", "&otimes;");
        mapE2.put("⊥", "&perp;");
        mapE2.put("⋅", "&sdot;");
        mapE2.put("⌈", "&lceil;");
        mapE2.put("⌉", "&rceil;");
        mapE2.put("⌊", "&lfloor;");
        mapE2.put("⌋", "&rfloor;");
        mapE2.put("〈", "&lang;");
        mapE2.put("〉", "&rang;");
        mapE2.put("◊", "&loz;");
        mapE2.put("♠", "&spades;");
        mapE2.put("♣", "&clubs;");
        mapE2.put("♥", "&hearts;");
        mapE2.put("♦", "&diams;");
        mapE2.put("Œ", "&OElig;");
        mapE2.put("œ", "&oelig;");
        mapE2.put("Š", "&Scaron;");
        mapE2.put("š", "&scaron;");
        mapE2.put("Ÿ", "&Yuml;");
        mapE2.put("ˆ", "&circ;");
        mapE2.put("˜", "&tilde;");
        mapE2.put("\u2002", "&ensp;");
        mapE2.put("\u2003", "&emsp;");
        mapE2.put("\u2009", "&thinsp;");
        mapE2.put("\u200c", "&zwnj;");
        mapE2.put("\u200d", "&zwj;");
        mapE2.put("\u200e", "&lrm;");
        mapE2.put("\u200f", "&rlm;");
        mapE2.put("–", "&ndash;");
        mapE2.put("—", "&mdash;");
        mapE2.put("‘", "&lsquo;");
        mapE2.put("’", "&rsquo;");
        mapE2.put("‚", "&sbquo;");
        mapE2.put("“", "&ldquo;");
        mapE2.put("”", "&rdquo;");
        mapE2.put("„", "&bdquo;");
        mapE2.put("†", "&dagger;");
        mapE2.put("‡", "&Dagger;");
        mapE2.put("‰", "&permil;");
        mapE2.put("‹", "&lsaquo;");
        mapE2.put("›", "&rsaquo;");
        mapE2.put("€", "&euro;");
        Map<CharSequence, CharSequence> mapUnmodifiableMap2 = Collections.unmodifiableMap(mapE2);
        HTML40_EXTENDED_ESCAPE = mapUnmodifiableMap2;
        HTML40_EXTENDED_UNESCAPE = Collections.unmodifiableMap(invert(mapUnmodifiableMap2));
        HashMap mapE3 = jo.E("\"", "&quot;", "&", "&amp;");
        mapE3.put("<", "&lt;");
        mapE3.put(">", "&gt;");
        Map<CharSequence, CharSequence> mapUnmodifiableMap3 = Collections.unmodifiableMap(mapE3);
        BASIC_ESCAPE = mapUnmodifiableMap3;
        BASIC_UNESCAPE = Collections.unmodifiableMap(invert(mapUnmodifiableMap3));
        HashMap map = new HashMap();
        map.put("'", "&apos;");
        Map<CharSequence, CharSequence> mapUnmodifiableMap4 = Collections.unmodifiableMap(map);
        APOS_ESCAPE = mapUnmodifiableMap4;
        APOS_UNESCAPE = Collections.unmodifiableMap(invert(mapUnmodifiableMap4));
        HashMap mapE4 = jo.E("\b", "\\b", "\n", "\\n");
        mapE4.put("\t", "\\t");
        mapE4.put("\f", "\\f");
        mapE4.put(StringUtils.CR, "\\r");
        Map<CharSequence, CharSequence> mapUnmodifiableMap5 = Collections.unmodifiableMap(mapE4);
        JAVA_CTRL_CHARS_ESCAPE = mapUnmodifiableMap5;
        JAVA_CTRL_CHARS_UNESCAPE = Collections.unmodifiableMap(invert(mapUnmodifiableMap5));
    }

    public static Map<CharSequence, CharSequence> invert(Map<CharSequence, CharSequence> map) {
        HashMap map2 = new HashMap();
        for (Map.Entry<CharSequence, CharSequence> entry : map.entrySet()) {
            map2.put(entry.getValue(), entry.getKey());
        }
        return map2;
    }
}
